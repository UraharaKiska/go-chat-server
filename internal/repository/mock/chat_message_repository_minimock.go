// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mock

//go:generate minimock -i github.com/UraharaKiska/go-chat-server/internal/repository.ChatMessageRepository -o chat_message_repository_minimock.go -n ChatMessageRepositoryMock -p mock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/UraharaKiska/go-chat-server/internal/model"
	"github.com/gojuno/minimock/v3"
)

// ChatMessageRepositoryMock implements mm_repository.ChatMessageRepository
type ChatMessageRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcAddMessage          func(ctx context.Context, message *model.MessageInfo) (err error)
	funcAddMessageOrigin    string
	inspectFuncAddMessage   func(ctx context.Context, message *model.MessageInfo)
	afterAddMessageCounter  uint64
	beforeAddMessageCounter uint64
	AddMessageMock          mChatMessageRepositoryMockAddMessage
}

// NewChatMessageRepositoryMock returns a mock for mm_repository.ChatMessageRepository
func NewChatMessageRepositoryMock(t minimock.Tester) *ChatMessageRepositoryMock {
	m := &ChatMessageRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddMessageMock = mChatMessageRepositoryMockAddMessage{mock: m}
	m.AddMessageMock.callArgs = []*ChatMessageRepositoryMockAddMessageParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mChatMessageRepositoryMockAddMessage struct {
	optional           bool
	mock               *ChatMessageRepositoryMock
	defaultExpectation *ChatMessageRepositoryMockAddMessageExpectation
	expectations       []*ChatMessageRepositoryMockAddMessageExpectation

	callArgs []*ChatMessageRepositoryMockAddMessageParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatMessageRepositoryMockAddMessageExpectation specifies expectation struct of the ChatMessageRepository.AddMessage
type ChatMessageRepositoryMockAddMessageExpectation struct {
	mock               *ChatMessageRepositoryMock
	params             *ChatMessageRepositoryMockAddMessageParams
	paramPtrs          *ChatMessageRepositoryMockAddMessageParamPtrs
	expectationOrigins ChatMessageRepositoryMockAddMessageExpectationOrigins
	results            *ChatMessageRepositoryMockAddMessageResults
	returnOrigin       string
	Counter            uint64
}

// ChatMessageRepositoryMockAddMessageParams contains parameters of the ChatMessageRepository.AddMessage
type ChatMessageRepositoryMockAddMessageParams struct {
	ctx     context.Context
	message *model.MessageInfo
}

// ChatMessageRepositoryMockAddMessageParamPtrs contains pointers to parameters of the ChatMessageRepository.AddMessage
type ChatMessageRepositoryMockAddMessageParamPtrs struct {
	ctx     *context.Context
	message **model.MessageInfo
}

// ChatMessageRepositoryMockAddMessageResults contains results of the ChatMessageRepository.AddMessage
type ChatMessageRepositoryMockAddMessageResults struct {
	err error
}

// ChatMessageRepositoryMockAddMessageOrigins contains origins of expectations of the ChatMessageRepository.AddMessage
type ChatMessageRepositoryMockAddMessageExpectationOrigins struct {
	origin        string
	originCtx     string
	originMessage string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmAddMessage *mChatMessageRepositoryMockAddMessage) Optional() *mChatMessageRepositoryMockAddMessage {
	mmAddMessage.optional = true
	return mmAddMessage
}

// Expect sets up expected params for ChatMessageRepository.AddMessage
func (mmAddMessage *mChatMessageRepositoryMockAddMessage) Expect(ctx context.Context, message *model.MessageInfo) *mChatMessageRepositoryMockAddMessage {
	if mmAddMessage.mock.funcAddMessage != nil {
		mmAddMessage.mock.t.Fatalf("ChatMessageRepositoryMock.AddMessage mock is already set by Set")
	}

	if mmAddMessage.defaultExpectation == nil {
		mmAddMessage.defaultExpectation = &ChatMessageRepositoryMockAddMessageExpectation{}
	}

	if mmAddMessage.defaultExpectation.paramPtrs != nil {
		mmAddMessage.mock.t.Fatalf("ChatMessageRepositoryMock.AddMessage mock is already set by ExpectParams functions")
	}

	mmAddMessage.defaultExpectation.params = &ChatMessageRepositoryMockAddMessageParams{ctx, message}
	mmAddMessage.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmAddMessage.expectations {
		if minimock.Equal(e.params, mmAddMessage.defaultExpectation.params) {
			mmAddMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddMessage.defaultExpectation.params)
		}
	}

	return mmAddMessage
}

// ExpectCtxParam1 sets up expected param ctx for ChatMessageRepository.AddMessage
func (mmAddMessage *mChatMessageRepositoryMockAddMessage) ExpectCtxParam1(ctx context.Context) *mChatMessageRepositoryMockAddMessage {
	if mmAddMessage.mock.funcAddMessage != nil {
		mmAddMessage.mock.t.Fatalf("ChatMessageRepositoryMock.AddMessage mock is already set by Set")
	}

	if mmAddMessage.defaultExpectation == nil {
		mmAddMessage.defaultExpectation = &ChatMessageRepositoryMockAddMessageExpectation{}
	}

	if mmAddMessage.defaultExpectation.params != nil {
		mmAddMessage.mock.t.Fatalf("ChatMessageRepositoryMock.AddMessage mock is already set by Expect")
	}

	if mmAddMessage.defaultExpectation.paramPtrs == nil {
		mmAddMessage.defaultExpectation.paramPtrs = &ChatMessageRepositoryMockAddMessageParamPtrs{}
	}
	mmAddMessage.defaultExpectation.paramPtrs.ctx = &ctx
	mmAddMessage.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmAddMessage
}

// ExpectMessageParam2 sets up expected param message for ChatMessageRepository.AddMessage
func (mmAddMessage *mChatMessageRepositoryMockAddMessage) ExpectMessageParam2(message *model.MessageInfo) *mChatMessageRepositoryMockAddMessage {
	if mmAddMessage.mock.funcAddMessage != nil {
		mmAddMessage.mock.t.Fatalf("ChatMessageRepositoryMock.AddMessage mock is already set by Set")
	}

	if mmAddMessage.defaultExpectation == nil {
		mmAddMessage.defaultExpectation = &ChatMessageRepositoryMockAddMessageExpectation{}
	}

	if mmAddMessage.defaultExpectation.params != nil {
		mmAddMessage.mock.t.Fatalf("ChatMessageRepositoryMock.AddMessage mock is already set by Expect")
	}

	if mmAddMessage.defaultExpectation.paramPtrs == nil {
		mmAddMessage.defaultExpectation.paramPtrs = &ChatMessageRepositoryMockAddMessageParamPtrs{}
	}
	mmAddMessage.defaultExpectation.paramPtrs.message = &message
	mmAddMessage.defaultExpectation.expectationOrigins.originMessage = minimock.CallerInfo(1)

	return mmAddMessage
}

// Inspect accepts an inspector function that has same arguments as the ChatMessageRepository.AddMessage
func (mmAddMessage *mChatMessageRepositoryMockAddMessage) Inspect(f func(ctx context.Context, message *model.MessageInfo)) *mChatMessageRepositoryMockAddMessage {
	if mmAddMessage.mock.inspectFuncAddMessage != nil {
		mmAddMessage.mock.t.Fatalf("Inspect function is already set for ChatMessageRepositoryMock.AddMessage")
	}

	mmAddMessage.mock.inspectFuncAddMessage = f

	return mmAddMessage
}

// Return sets up results that will be returned by ChatMessageRepository.AddMessage
func (mmAddMessage *mChatMessageRepositoryMockAddMessage) Return(err error) *ChatMessageRepositoryMock {
	if mmAddMessage.mock.funcAddMessage != nil {
		mmAddMessage.mock.t.Fatalf("ChatMessageRepositoryMock.AddMessage mock is already set by Set")
	}

	if mmAddMessage.defaultExpectation == nil {
		mmAddMessage.defaultExpectation = &ChatMessageRepositoryMockAddMessageExpectation{mock: mmAddMessage.mock}
	}
	mmAddMessage.defaultExpectation.results = &ChatMessageRepositoryMockAddMessageResults{err}
	mmAddMessage.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmAddMessage.mock
}

// Set uses given function f to mock the ChatMessageRepository.AddMessage method
func (mmAddMessage *mChatMessageRepositoryMockAddMessage) Set(f func(ctx context.Context, message *model.MessageInfo) (err error)) *ChatMessageRepositoryMock {
	if mmAddMessage.defaultExpectation != nil {
		mmAddMessage.mock.t.Fatalf("Default expectation is already set for the ChatMessageRepository.AddMessage method")
	}

	if len(mmAddMessage.expectations) > 0 {
		mmAddMessage.mock.t.Fatalf("Some expectations are already set for the ChatMessageRepository.AddMessage method")
	}

	mmAddMessage.mock.funcAddMessage = f
	mmAddMessage.mock.funcAddMessageOrigin = minimock.CallerInfo(1)
	return mmAddMessage.mock
}

// When sets expectation for the ChatMessageRepository.AddMessage which will trigger the result defined by the following
// Then helper
func (mmAddMessage *mChatMessageRepositoryMockAddMessage) When(ctx context.Context, message *model.MessageInfo) *ChatMessageRepositoryMockAddMessageExpectation {
	if mmAddMessage.mock.funcAddMessage != nil {
		mmAddMessage.mock.t.Fatalf("ChatMessageRepositoryMock.AddMessage mock is already set by Set")
	}

	expectation := &ChatMessageRepositoryMockAddMessageExpectation{
		mock:               mmAddMessage.mock,
		params:             &ChatMessageRepositoryMockAddMessageParams{ctx, message},
		expectationOrigins: ChatMessageRepositoryMockAddMessageExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmAddMessage.expectations = append(mmAddMessage.expectations, expectation)
	return expectation
}

// Then sets up ChatMessageRepository.AddMessage return parameters for the expectation previously defined by the When method
func (e *ChatMessageRepositoryMockAddMessageExpectation) Then(err error) *ChatMessageRepositoryMock {
	e.results = &ChatMessageRepositoryMockAddMessageResults{err}
	return e.mock
}

// Times sets number of times ChatMessageRepository.AddMessage should be invoked
func (mmAddMessage *mChatMessageRepositoryMockAddMessage) Times(n uint64) *mChatMessageRepositoryMockAddMessage {
	if n == 0 {
		mmAddMessage.mock.t.Fatalf("Times of ChatMessageRepositoryMock.AddMessage mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmAddMessage.expectedInvocations, n)
	mmAddMessage.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmAddMessage
}

func (mmAddMessage *mChatMessageRepositoryMockAddMessage) invocationsDone() bool {
	if len(mmAddMessage.expectations) == 0 && mmAddMessage.defaultExpectation == nil && mmAddMessage.mock.funcAddMessage == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmAddMessage.mock.afterAddMessageCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmAddMessage.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// AddMessage implements mm_repository.ChatMessageRepository
func (mmAddMessage *ChatMessageRepositoryMock) AddMessage(ctx context.Context, message *model.MessageInfo) (err error) {
	mm_atomic.AddUint64(&mmAddMessage.beforeAddMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmAddMessage.afterAddMessageCounter, 1)

	mmAddMessage.t.Helper()

	if mmAddMessage.inspectFuncAddMessage != nil {
		mmAddMessage.inspectFuncAddMessage(ctx, message)
	}

	mm_params := ChatMessageRepositoryMockAddMessageParams{ctx, message}

	// Record call args
	mmAddMessage.AddMessageMock.mutex.Lock()
	mmAddMessage.AddMessageMock.callArgs = append(mmAddMessage.AddMessageMock.callArgs, &mm_params)
	mmAddMessage.AddMessageMock.mutex.Unlock()

	for _, e := range mmAddMessage.AddMessageMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmAddMessage.AddMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddMessage.AddMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmAddMessage.AddMessageMock.defaultExpectation.params
		mm_want_ptrs := mmAddMessage.AddMessageMock.defaultExpectation.paramPtrs

		mm_got := ChatMessageRepositoryMockAddMessageParams{ctx, message}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmAddMessage.t.Errorf("ChatMessageRepositoryMock.AddMessage got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddMessage.AddMessageMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.message != nil && !minimock.Equal(*mm_want_ptrs.message, mm_got.message) {
				mmAddMessage.t.Errorf("ChatMessageRepositoryMock.AddMessage got unexpected parameter message, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddMessage.AddMessageMock.defaultExpectation.expectationOrigins.originMessage, *mm_want_ptrs.message, mm_got.message, minimock.Diff(*mm_want_ptrs.message, mm_got.message))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddMessage.t.Errorf("ChatMessageRepositoryMock.AddMessage got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmAddMessage.AddMessageMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAddMessage.AddMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmAddMessage.t.Fatal("No results are set for the ChatMessageRepositoryMock.AddMessage")
		}
		return (*mm_results).err
	}
	if mmAddMessage.funcAddMessage != nil {
		return mmAddMessage.funcAddMessage(ctx, message)
	}
	mmAddMessage.t.Fatalf("Unexpected call to ChatMessageRepositoryMock.AddMessage. %v %v", ctx, message)
	return
}

// AddMessageAfterCounter returns a count of finished ChatMessageRepositoryMock.AddMessage invocations
func (mmAddMessage *ChatMessageRepositoryMock) AddMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddMessage.afterAddMessageCounter)
}

// AddMessageBeforeCounter returns a count of ChatMessageRepositoryMock.AddMessage invocations
func (mmAddMessage *ChatMessageRepositoryMock) AddMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddMessage.beforeAddMessageCounter)
}

// Calls returns a list of arguments used in each call to ChatMessageRepositoryMock.AddMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddMessage *mChatMessageRepositoryMockAddMessage) Calls() []*ChatMessageRepositoryMockAddMessageParams {
	mmAddMessage.mutex.RLock()

	argCopy := make([]*ChatMessageRepositoryMockAddMessageParams, len(mmAddMessage.callArgs))
	copy(argCopy, mmAddMessage.callArgs)

	mmAddMessage.mutex.RUnlock()

	return argCopy
}

// MinimockAddMessageDone returns true if the count of the AddMessage invocations corresponds
// the number of defined expectations
func (m *ChatMessageRepositoryMock) MinimockAddMessageDone() bool {
	if m.AddMessageMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.AddMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.AddMessageMock.invocationsDone()
}

// MinimockAddMessageInspect logs each unmet expectation
func (m *ChatMessageRepositoryMock) MinimockAddMessageInspect() {
	for _, e := range m.AddMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatMessageRepositoryMock.AddMessage at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterAddMessageCounter := mm_atomic.LoadUint64(&m.afterAddMessageCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.AddMessageMock.defaultExpectation != nil && afterAddMessageCounter < 1 {
		if m.AddMessageMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatMessageRepositoryMock.AddMessage at\n%s", m.AddMessageMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatMessageRepositoryMock.AddMessage at\n%s with params: %#v", m.AddMessageMock.defaultExpectation.expectationOrigins.origin, *m.AddMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddMessage != nil && afterAddMessageCounter < 1 {
		m.t.Errorf("Expected call to ChatMessageRepositoryMock.AddMessage at\n%s", m.funcAddMessageOrigin)
	}

	if !m.AddMessageMock.invocationsDone() && afterAddMessageCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatMessageRepositoryMock.AddMessage at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.AddMessageMock.expectedInvocations), m.AddMessageMock.expectedInvocationsOrigin, afterAddMessageCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ChatMessageRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockAddMessageInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ChatMessageRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ChatMessageRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddMessageDone()
}
