// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mock

//go:generate minimock -i github.com/UraharaKiska/go-chat-server/internal/repository.ChatUserRepository -o chat_user_repository_minimock.go -n ChatUserRepositoryMock -p mock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ChatUserRepositoryMock implements mm_repository.ChatUserRepository
type ChatUserRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcAddUsers          func(ctx context.Context, chatId int64, users *[]string) (err error)
	funcAddUsersOrigin    string
	inspectFuncAddUsers   func(ctx context.Context, chatId int64, users *[]string)
	afterAddUsersCounter  uint64
	beforeAddUsersCounter uint64
	AddUsersMock          mChatUserRepositoryMockAddUsers
}

// NewChatUserRepositoryMock returns a mock for mm_repository.ChatUserRepository
func NewChatUserRepositoryMock(t minimock.Tester) *ChatUserRepositoryMock {
	m := &ChatUserRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddUsersMock = mChatUserRepositoryMockAddUsers{mock: m}
	m.AddUsersMock.callArgs = []*ChatUserRepositoryMockAddUsersParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mChatUserRepositoryMockAddUsers struct {
	optional           bool
	mock               *ChatUserRepositoryMock
	defaultExpectation *ChatUserRepositoryMockAddUsersExpectation
	expectations       []*ChatUserRepositoryMockAddUsersExpectation

	callArgs []*ChatUserRepositoryMockAddUsersParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatUserRepositoryMockAddUsersExpectation specifies expectation struct of the ChatUserRepository.AddUsers
type ChatUserRepositoryMockAddUsersExpectation struct {
	mock               *ChatUserRepositoryMock
	params             *ChatUserRepositoryMockAddUsersParams
	paramPtrs          *ChatUserRepositoryMockAddUsersParamPtrs
	expectationOrigins ChatUserRepositoryMockAddUsersExpectationOrigins
	results            *ChatUserRepositoryMockAddUsersResults
	returnOrigin       string
	Counter            uint64
}

// ChatUserRepositoryMockAddUsersParams contains parameters of the ChatUserRepository.AddUsers
type ChatUserRepositoryMockAddUsersParams struct {
	ctx    context.Context
	chatId int64
	users  *[]string
}

// ChatUserRepositoryMockAddUsersParamPtrs contains pointers to parameters of the ChatUserRepository.AddUsers
type ChatUserRepositoryMockAddUsersParamPtrs struct {
	ctx    *context.Context
	chatId *int64
	users  **[]string
}

// ChatUserRepositoryMockAddUsersResults contains results of the ChatUserRepository.AddUsers
type ChatUserRepositoryMockAddUsersResults struct {
	err error
}

// ChatUserRepositoryMockAddUsersOrigins contains origins of expectations of the ChatUserRepository.AddUsers
type ChatUserRepositoryMockAddUsersExpectationOrigins struct {
	origin       string
	originCtx    string
	originChatId string
	originUsers  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmAddUsers *mChatUserRepositoryMockAddUsers) Optional() *mChatUserRepositoryMockAddUsers {
	mmAddUsers.optional = true
	return mmAddUsers
}

// Expect sets up expected params for ChatUserRepository.AddUsers
func (mmAddUsers *mChatUserRepositoryMockAddUsers) Expect(ctx context.Context, chatId int64, users *[]string) *mChatUserRepositoryMockAddUsers {
	if mmAddUsers.mock.funcAddUsers != nil {
		mmAddUsers.mock.t.Fatalf("ChatUserRepositoryMock.AddUsers mock is already set by Set")
	}

	if mmAddUsers.defaultExpectation == nil {
		mmAddUsers.defaultExpectation = &ChatUserRepositoryMockAddUsersExpectation{}
	}

	if mmAddUsers.defaultExpectation.paramPtrs != nil {
		mmAddUsers.mock.t.Fatalf("ChatUserRepositoryMock.AddUsers mock is already set by ExpectParams functions")
	}

	mmAddUsers.defaultExpectation.params = &ChatUserRepositoryMockAddUsersParams{ctx, chatId, users}
	mmAddUsers.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmAddUsers.expectations {
		if minimock.Equal(e.params, mmAddUsers.defaultExpectation.params) {
			mmAddUsers.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddUsers.defaultExpectation.params)
		}
	}

	return mmAddUsers
}

// ExpectCtxParam1 sets up expected param ctx for ChatUserRepository.AddUsers
func (mmAddUsers *mChatUserRepositoryMockAddUsers) ExpectCtxParam1(ctx context.Context) *mChatUserRepositoryMockAddUsers {
	if mmAddUsers.mock.funcAddUsers != nil {
		mmAddUsers.mock.t.Fatalf("ChatUserRepositoryMock.AddUsers mock is already set by Set")
	}

	if mmAddUsers.defaultExpectation == nil {
		mmAddUsers.defaultExpectation = &ChatUserRepositoryMockAddUsersExpectation{}
	}

	if mmAddUsers.defaultExpectation.params != nil {
		mmAddUsers.mock.t.Fatalf("ChatUserRepositoryMock.AddUsers mock is already set by Expect")
	}

	if mmAddUsers.defaultExpectation.paramPtrs == nil {
		mmAddUsers.defaultExpectation.paramPtrs = &ChatUserRepositoryMockAddUsersParamPtrs{}
	}
	mmAddUsers.defaultExpectation.paramPtrs.ctx = &ctx
	mmAddUsers.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmAddUsers
}

// ExpectChatIdParam2 sets up expected param chatId for ChatUserRepository.AddUsers
func (mmAddUsers *mChatUserRepositoryMockAddUsers) ExpectChatIdParam2(chatId int64) *mChatUserRepositoryMockAddUsers {
	if mmAddUsers.mock.funcAddUsers != nil {
		mmAddUsers.mock.t.Fatalf("ChatUserRepositoryMock.AddUsers mock is already set by Set")
	}

	if mmAddUsers.defaultExpectation == nil {
		mmAddUsers.defaultExpectation = &ChatUserRepositoryMockAddUsersExpectation{}
	}

	if mmAddUsers.defaultExpectation.params != nil {
		mmAddUsers.mock.t.Fatalf("ChatUserRepositoryMock.AddUsers mock is already set by Expect")
	}

	if mmAddUsers.defaultExpectation.paramPtrs == nil {
		mmAddUsers.defaultExpectation.paramPtrs = &ChatUserRepositoryMockAddUsersParamPtrs{}
	}
	mmAddUsers.defaultExpectation.paramPtrs.chatId = &chatId
	mmAddUsers.defaultExpectation.expectationOrigins.originChatId = minimock.CallerInfo(1)

	return mmAddUsers
}

// ExpectUsersParam3 sets up expected param users for ChatUserRepository.AddUsers
func (mmAddUsers *mChatUserRepositoryMockAddUsers) ExpectUsersParam3(users *[]string) *mChatUserRepositoryMockAddUsers {
	if mmAddUsers.mock.funcAddUsers != nil {
		mmAddUsers.mock.t.Fatalf("ChatUserRepositoryMock.AddUsers mock is already set by Set")
	}

	if mmAddUsers.defaultExpectation == nil {
		mmAddUsers.defaultExpectation = &ChatUserRepositoryMockAddUsersExpectation{}
	}

	if mmAddUsers.defaultExpectation.params != nil {
		mmAddUsers.mock.t.Fatalf("ChatUserRepositoryMock.AddUsers mock is already set by Expect")
	}

	if mmAddUsers.defaultExpectation.paramPtrs == nil {
		mmAddUsers.defaultExpectation.paramPtrs = &ChatUserRepositoryMockAddUsersParamPtrs{}
	}
	mmAddUsers.defaultExpectation.paramPtrs.users = &users
	mmAddUsers.defaultExpectation.expectationOrigins.originUsers = minimock.CallerInfo(1)

	return mmAddUsers
}

// Inspect accepts an inspector function that has same arguments as the ChatUserRepository.AddUsers
func (mmAddUsers *mChatUserRepositoryMockAddUsers) Inspect(f func(ctx context.Context, chatId int64, users *[]string)) *mChatUserRepositoryMockAddUsers {
	if mmAddUsers.mock.inspectFuncAddUsers != nil {
		mmAddUsers.mock.t.Fatalf("Inspect function is already set for ChatUserRepositoryMock.AddUsers")
	}

	mmAddUsers.mock.inspectFuncAddUsers = f

	return mmAddUsers
}

// Return sets up results that will be returned by ChatUserRepository.AddUsers
func (mmAddUsers *mChatUserRepositoryMockAddUsers) Return(err error) *ChatUserRepositoryMock {
	if mmAddUsers.mock.funcAddUsers != nil {
		mmAddUsers.mock.t.Fatalf("ChatUserRepositoryMock.AddUsers mock is already set by Set")
	}

	if mmAddUsers.defaultExpectation == nil {
		mmAddUsers.defaultExpectation = &ChatUserRepositoryMockAddUsersExpectation{mock: mmAddUsers.mock}
	}
	mmAddUsers.defaultExpectation.results = &ChatUserRepositoryMockAddUsersResults{err}
	mmAddUsers.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmAddUsers.mock
}

// Set uses given function f to mock the ChatUserRepository.AddUsers method
func (mmAddUsers *mChatUserRepositoryMockAddUsers) Set(f func(ctx context.Context, chatId int64, users *[]string) (err error)) *ChatUserRepositoryMock {
	if mmAddUsers.defaultExpectation != nil {
		mmAddUsers.mock.t.Fatalf("Default expectation is already set for the ChatUserRepository.AddUsers method")
	}

	if len(mmAddUsers.expectations) > 0 {
		mmAddUsers.mock.t.Fatalf("Some expectations are already set for the ChatUserRepository.AddUsers method")
	}

	mmAddUsers.mock.funcAddUsers = f
	mmAddUsers.mock.funcAddUsersOrigin = minimock.CallerInfo(1)
	return mmAddUsers.mock
}

// When sets expectation for the ChatUserRepository.AddUsers which will trigger the result defined by the following
// Then helper
func (mmAddUsers *mChatUserRepositoryMockAddUsers) When(ctx context.Context, chatId int64, users *[]string) *ChatUserRepositoryMockAddUsersExpectation {
	if mmAddUsers.mock.funcAddUsers != nil {
		mmAddUsers.mock.t.Fatalf("ChatUserRepositoryMock.AddUsers mock is already set by Set")
	}

	expectation := &ChatUserRepositoryMockAddUsersExpectation{
		mock:               mmAddUsers.mock,
		params:             &ChatUserRepositoryMockAddUsersParams{ctx, chatId, users},
		expectationOrigins: ChatUserRepositoryMockAddUsersExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmAddUsers.expectations = append(mmAddUsers.expectations, expectation)
	return expectation
}

// Then sets up ChatUserRepository.AddUsers return parameters for the expectation previously defined by the When method
func (e *ChatUserRepositoryMockAddUsersExpectation) Then(err error) *ChatUserRepositoryMock {
	e.results = &ChatUserRepositoryMockAddUsersResults{err}
	return e.mock
}

// Times sets number of times ChatUserRepository.AddUsers should be invoked
func (mmAddUsers *mChatUserRepositoryMockAddUsers) Times(n uint64) *mChatUserRepositoryMockAddUsers {
	if n == 0 {
		mmAddUsers.mock.t.Fatalf("Times of ChatUserRepositoryMock.AddUsers mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmAddUsers.expectedInvocations, n)
	mmAddUsers.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmAddUsers
}

func (mmAddUsers *mChatUserRepositoryMockAddUsers) invocationsDone() bool {
	if len(mmAddUsers.expectations) == 0 && mmAddUsers.defaultExpectation == nil && mmAddUsers.mock.funcAddUsers == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmAddUsers.mock.afterAddUsersCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmAddUsers.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// AddUsers implements mm_repository.ChatUserRepository
func (mmAddUsers *ChatUserRepositoryMock) AddUsers(ctx context.Context, chatId int64, users *[]string) (err error) {
	mm_atomic.AddUint64(&mmAddUsers.beforeAddUsersCounter, 1)
	defer mm_atomic.AddUint64(&mmAddUsers.afterAddUsersCounter, 1)

	mmAddUsers.t.Helper()

	if mmAddUsers.inspectFuncAddUsers != nil {
		mmAddUsers.inspectFuncAddUsers(ctx, chatId, users)
	}

	mm_params := ChatUserRepositoryMockAddUsersParams{ctx, chatId, users}

	// Record call args
	mmAddUsers.AddUsersMock.mutex.Lock()
	mmAddUsers.AddUsersMock.callArgs = append(mmAddUsers.AddUsersMock.callArgs, &mm_params)
	mmAddUsers.AddUsersMock.mutex.Unlock()

	for _, e := range mmAddUsers.AddUsersMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmAddUsers.AddUsersMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddUsers.AddUsersMock.defaultExpectation.Counter, 1)
		mm_want := mmAddUsers.AddUsersMock.defaultExpectation.params
		mm_want_ptrs := mmAddUsers.AddUsersMock.defaultExpectation.paramPtrs

		mm_got := ChatUserRepositoryMockAddUsersParams{ctx, chatId, users}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmAddUsers.t.Errorf("ChatUserRepositoryMock.AddUsers got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddUsers.AddUsersMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.chatId != nil && !minimock.Equal(*mm_want_ptrs.chatId, mm_got.chatId) {
				mmAddUsers.t.Errorf("ChatUserRepositoryMock.AddUsers got unexpected parameter chatId, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddUsers.AddUsersMock.defaultExpectation.expectationOrigins.originChatId, *mm_want_ptrs.chatId, mm_got.chatId, minimock.Diff(*mm_want_ptrs.chatId, mm_got.chatId))
			}

			if mm_want_ptrs.users != nil && !minimock.Equal(*mm_want_ptrs.users, mm_got.users) {
				mmAddUsers.t.Errorf("ChatUserRepositoryMock.AddUsers got unexpected parameter users, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddUsers.AddUsersMock.defaultExpectation.expectationOrigins.originUsers, *mm_want_ptrs.users, mm_got.users, minimock.Diff(*mm_want_ptrs.users, mm_got.users))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddUsers.t.Errorf("ChatUserRepositoryMock.AddUsers got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmAddUsers.AddUsersMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAddUsers.AddUsersMock.defaultExpectation.results
		if mm_results == nil {
			mmAddUsers.t.Fatal("No results are set for the ChatUserRepositoryMock.AddUsers")
		}
		return (*mm_results).err
	}
	if mmAddUsers.funcAddUsers != nil {
		return mmAddUsers.funcAddUsers(ctx, chatId, users)
	}
	mmAddUsers.t.Fatalf("Unexpected call to ChatUserRepositoryMock.AddUsers. %v %v %v", ctx, chatId, users)
	return
}

// AddUsersAfterCounter returns a count of finished ChatUserRepositoryMock.AddUsers invocations
func (mmAddUsers *ChatUserRepositoryMock) AddUsersAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddUsers.afterAddUsersCounter)
}

// AddUsersBeforeCounter returns a count of ChatUserRepositoryMock.AddUsers invocations
func (mmAddUsers *ChatUserRepositoryMock) AddUsersBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddUsers.beforeAddUsersCounter)
}

// Calls returns a list of arguments used in each call to ChatUserRepositoryMock.AddUsers.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddUsers *mChatUserRepositoryMockAddUsers) Calls() []*ChatUserRepositoryMockAddUsersParams {
	mmAddUsers.mutex.RLock()

	argCopy := make([]*ChatUserRepositoryMockAddUsersParams, len(mmAddUsers.callArgs))
	copy(argCopy, mmAddUsers.callArgs)

	mmAddUsers.mutex.RUnlock()

	return argCopy
}

// MinimockAddUsersDone returns true if the count of the AddUsers invocations corresponds
// the number of defined expectations
func (m *ChatUserRepositoryMock) MinimockAddUsersDone() bool {
	if m.AddUsersMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.AddUsersMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.AddUsersMock.invocationsDone()
}

// MinimockAddUsersInspect logs each unmet expectation
func (m *ChatUserRepositoryMock) MinimockAddUsersInspect() {
	for _, e := range m.AddUsersMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatUserRepositoryMock.AddUsers at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterAddUsersCounter := mm_atomic.LoadUint64(&m.afterAddUsersCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.AddUsersMock.defaultExpectation != nil && afterAddUsersCounter < 1 {
		if m.AddUsersMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatUserRepositoryMock.AddUsers at\n%s", m.AddUsersMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatUserRepositoryMock.AddUsers at\n%s with params: %#v", m.AddUsersMock.defaultExpectation.expectationOrigins.origin, *m.AddUsersMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddUsers != nil && afterAddUsersCounter < 1 {
		m.t.Errorf("Expected call to ChatUserRepositoryMock.AddUsers at\n%s", m.funcAddUsersOrigin)
	}

	if !m.AddUsersMock.invocationsDone() && afterAddUsersCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatUserRepositoryMock.AddUsers at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.AddUsersMock.expectedInvocations), m.AddUsersMock.expectedInvocationsOrigin, afterAddUsersCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ChatUserRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockAddUsersInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ChatUserRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ChatUserRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddUsersDone()
}
