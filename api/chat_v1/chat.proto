syntax = "proto3";

package chat_v1;

import "google/protobuf/empty.proto";
import "validate/validate.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";


option go_package = "github.com/UraharaKiska/go-chat-server/pkg/chat_v1;chat_v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Chat API"
    version: "1.0.0"
    contact: {
      name: "Ichigo Kurasaki"
    };
  };

  host: "localhost:8084",
  schemes: HTTP,
  schemes: HTTPS,
  consumes: "application/json",
  produces: "applications/json",
};


service ChatV1{
  // Создать чат
  rpc Create(CreateRequest) returns(CreateResponse){
    option (google.api.http) = {
      post: "/api/v1/chat"
      body: "*"
    };
  }
 // Удалить чат
  rpc Delete(DeleteRequest) returns(google.protobuf.Empty){
    option (google.api.http) = {
      delete: "/api/v1/chat"
    };
  }
  // Отправить сообщение
  rpc SendMessage(SendMessageRequest) returns(google.protobuf.Empty){
      option (google.api.http) = {
      post: "/api/v1/message"
      body: "*"
    };
  }
}

message Message {
  int64 id = 1;
  MessageInfo messageInfo = 2;
}

message MessageInfo {
  string from = 1  [(validate.rules).string = {min_len: 2, max_len: 50}]; 
  string text = 2  [(validate.rules).string = {min_len: 2, max_len: 50}];
  string datetime = 3;
}

message ChatInfo {
  string name = 1  [(validate.rules).string = {min_len: 2, max_len: 50}];
}

message CreateRequest {
  ChatInfo chatInfo = 1;
  repeated string usernames = 2;
}

message CreateResponse {
  int64 id = 1;
}

message DeleteRequest {
  int64 id = 1;
}

message SendMessageRequest {
  MessageInfo message = 1;
}





